print(rf_model)
print(rf_model$finalModel)
prediction_classes = predict.train(object=rf_model, newdata=test_data, na.action=na.omit)
predictions = data.frame(id=test_data$id, prediction=prediction_classes)
predictions
print(rf_model$finalModel)
rf_model<-train(income~age+gender+origin+edu+rating+gain+loss+hours_weekly,data=training_data,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
print(rf_model)
print(rf_model$finalModel)
prediction_classes = predict.train(object=rf_model, newdata=test_data, na.action=na.omit)
predictions = data.frame(id=test_data$id, prediction=prediction_classes)
predictions
write.csv(predictions, file="predictions_group_name_number.csv", row.names=FALSE)
prediction_classes = predict.train(object=rf_model, newdata=test_data, na.action=na.pass)
predictions = data.frame(id=test_data$id, prediction=prediction_classes)
predictions
write.csv(predictions, file="predictions_group_name_number.csv", row.names=FALSE)
write.csv(predictions, file="predictions_atum_1.csv", row.names=FALSE)
tc <- trainControl("repeatedcv", number=10, repeats=100, classProbs=TRUE, savePred=T)
InTrain<-createDataPartition(y=training_data$income,p=0.3,list=FALSE)
training1<-training_data[InTrain,]
rf_model<-train(income~age+gender+origin+edu+rating+gain+loss+hours_weekly,data=training_data,method="rf",
trControl=trainControl(method="cv",number=10),
prox=TRUE,allowParallel=TRUE)
print(rf_model)
print(rf_model$finalModel)
rf_model<-train(income~age+gender+family_status+origin+edu+rating+gain+loss+hours_weekly,data=training_data,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
install.packages("caret")
library(caret)
install.packages("e1071")
library(e1071)
set.seed(42) # do NOT CHANGE this seed
training_data = read.csv("training.csv", sep=",")
test_data = read.csv("test.csv", sep=",")
training
training_data
rf_model<-train(income~age+gender+education+origin+edu+rating+gain+loss+hours_weekly,data=training_data,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
print(rf_model)
print(rf_model$finalModel)
rf_model<-train(income~age+gender+origin+edu+rating+gain+loss+hours_weekly,data=training_data,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
print(rf_model)
print(rf_model$finalModel)
training_data
data = read.csv("raw_data.csv")
str(data)
data = read.csv("raw_data.csv", sep=";")
str(data)
table(data$salutation)
names(data)
names(data)[names(data) == "od"] = "order_date"
names(data)[names(data) == "dd"] = "delivery_date"
names(data)[names(data) == "a6"] = "salutation"
names(data)[names(data) == "a7"] = "date_of_birth"
names(data)[names(data) == "a8"] = "state"
names(data)[names(data) == "a9"] = "return_shipment"
str(data)
table(data$salutation)
names(training_data)
table(training_data$family_status)
training_data$family_status = factor(training_data$family_status, labels=c("divorced", "married", "never-married", "seperated", "widowed"))
table(training_data$family_status)
table(test_data$family_status)
test_data$family_status = factor(training_data$family_status, labels=c("divorced", "married", "never-married", "seperated", "widowed"))
rf_model<-train(income~age+gender+origin+edu+rating+gain+family_status+loss+hours_weekly,data=training_data,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
print(rf_model)
print(rf_model$finalModel)
training_data = training_data[!(training_data$family_status=="widowed"), ]
table(training_data)
table(training_data$family_status)
tc <- trainControl("repeatedcv", number=10, repeats=10, classProbs=TRUE, savePred=T)
InTrain<-createDataPartition(y=training_data$income,p=0.3,list=FALSE)
training1<-training_data[InTrain,]
set.seed(42) # do NOT CHANGE this seed
rf_model<-train(income~age+gender+origin+edu+rating+gain+family_status+loss+hours_weekly,data=training_data,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
str(training_data)
print(rf_model)
print(rf_model$finalModel)
prediction_classes = predict.train(object=rf_model, newdata=test_data, na.action=na.pass)
rf_model<-train(income~age+gender+origin+edu+rating+gain+as.factor(family_status)+loss+hours_weekly,data=training_data,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
print(rf_model)
print(rf_model$finalModel)
prediction_classes = predict.train(object=rf_model, newdata=test_data, na.action=na.pass)
factor(training_data$family_status)
table(training_data$family_status)
factor(training_data$family_status)
training_data <- factor(training_data$family_status)
training_data = read.csv("training.csv", sep=",")
names(training_data)
table(training_data$family_status)
training_data$family_status = factor(training_data$family_status, labels=c("divorced", "married", "never-married", "seperated", "widowed"))
table(training_data$family_status)
table(test_data$family_status)
test_data$family_status = factor(training_data$family_status, labels=c("divorced", "married", "never-married", "seperated"))
table(test_data$family_status)
table(test_data$family_status)
test_data$family_status = factor(training_data$family_status, labels=c("divorced", "married", "never-married", "seperated"))
table(test_data$family_status)
table(test_data$family_status)
test_data$family_status = factor(test_data$family_status, labels=c("divorced", "married", "never-married", "seperated"))
table(test_data$family_status)
table(training_data$family_status)
training_data$family_status = factor(training_data$family_status, labels=c("divorced", "married", "never-married", "seperated", "widowed"))
table(training_data$family_status)
training_data = training_data[!(training_data$family_status=="widowed"), ]
table(training_data$family_status)
training_data$family_status <- factor(training_data$family_status)
table(training_data$family_status)
tc <- trainControl("repeatedcv", number=10, repeats=10, classProbs=TRUE, savePred=T)
InTrain<-createDataPartition(y=training_data$income,p=0.3,list=FALSE)
training1<-training_data[InTrain,]
rf_model<-train(income~age+gender+origin+edu+rating+gain+as.factor(family_status)+loss+hours_weekly,data=training_data,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
print(rf_model)
print(rf_model$finalModel)
prediction_classes = predict.train(object=rf_model, newdata=test_data, na.action=na.pass)
prediction_classes = predict.train(object=rf_model, newdata=test_data, na.action=na.pass)
prediction_classes = predict.train(object=rf_model, newdata=test_data, na.action=na.pass)
print(rf_model)
print(rf_model$finalModel)
prediction_classes = predict.train(object=rf_model, newdata=test_data, na.action=na.pass)
table(test_data$family_status)
table(training_data$family_status)
prediction_classes = predict.train(object=rf_model, data=test_data, na.action=na.pass)
prediction_classes = predict.train(object=rf_model, newdata=test_data, na.action=na.pass)
str(training_data)
str(test_data)
test_data
table(data$size, useNA="always")
table(test_data$family_status, useNA="always")
table(training_data$family_status, useNA="always")
test_data$family_status[is.na(test_data$family_status)] = mode(test_data$family_status, na.rm=TRUE)
test_data$family_status[is.na(test_data$family_status)] = mode(training_data$family_status, na.rm=TRUE)
test_data$family_status[is.na(test_data$family_status)] = mode(training_data$family_status)
mode(training_data$family_status)
table(training_data$family_status)
mode(training_data$family_status)
test_data
test_data$family_status[is.na(test_data$family_status)] = "married"
test_data
table(test_data$family_status, useNA="always")
prediction_classes = predict.train(object=rf_model, newdata=test_data, na.action=na.pass)
predictions = data.frame(id=test_data$id, prediction=prediction_classes)
predictions
write.csv(predictions, file="predictions_atum_2.csv", row.names=FALSE)
training_data$edu = ordered(training_data$edu)
str(training_data)
training_data$edu = ordered(training_data$edu)
test_data$edu = ordered(test_data$edu)
str(training_data)
str(test_data)
table(test_data$workclass, useNA="always")
table(training_data$workclass, useNA="always")
training_data = training_data[!(training_data$workclass=="Without-pay"), ]
table(training_data$workclass, useNA="always")
training_data = training_data[!(training_data$workclass=="Without-pay"), ]
table(training_data$workclass, useNA="always")
training_data = training_data[!(training_data$workclass=="without-pay"), ]
table(training_data$workclass, useNA="always")
training_data$workclass <- factor(training_data$workclass)
table(training_data$workclass, useNA="always")
test_data$workclass = toUpper(test_data$workclass)
test_data$workclass = toUpper(test_data$workclass)
test_data$workclass = toupper(test_data$workclass)
table(test_data$workclass, useNA="always")
training_data$workclass = toupper(training_data$workclass)
training_data = training_data[!(training_data$workclass=="WITHOUT-PAY"), ]
training_data$workclass <- factor(training_data$workclass)
table(training_data$workclass, useNA="always")
set.seed(42) # do NOT CHANGE this seed
training_data = read.csv("training.csv", sep=",")
test_data = read.csv("test.csv", sep=",")
test_data
training_data$edu = ordered(training_data$edu)
test_data$edu = ordered(test_data$edu)
str(training_data)
str(test_data)
table(test_data$workclass, useNA="always")
table(training_data$workclass, useNA="always")
training_data = training_data[!(training_data$workclass=="Without-pay"), ]
table(training_data$workclass, useNA="always")
training_data = training_data[!(training_data$workclass=="?"), ]
table(training_data$workclass, useNA="always")
training_data = training_data[(!training_data$workclass=="?"), ]
table(training_data$workclass, useNA="always")
training_data = training_data[training_data$workclass =="?"), ]
training_data = training_data[training_data$workclass =="?" , ]
table(training_data$workclass, useNA="always")
training_data = read.csv("training.csv", sep=",")
training_data$edu = ordered(training_data$edu)
test_data$edu = ordered(test_data$edu)
str(training_data)
str(test_data)
table(test_data$workclass, useNA="always")
table(training_data$workclass, useNA="always")
training_data = training_data[ !(training_data$workclass == "Without-pay") , ]
table(training_data$workclass, useNA="always")
training_data = training_data[!training_data$workclass == "Without-pay"]
training_data = training_data[!training_data$workclass == "Without-pay",]
table(training_data$workclass, useNA="always")
training_data = training_data[!training_data$workclass == "Without-pay",]
table(training_data$workclass, useNA="always")
training_data = training_data[!training_data$workclass == Without-pay,]
training_data = training_data[!training_data$workclass == 'Without-pay',]
table(training_data$workclass, useNA="always")
id = training$id[training$workclass == 'Without-pay']
id = training_data$id[training_data$workclass == 'Without-pay']
id = training_data$id[training_data$workclass == '?']
id
training_data$state = factor(training_data$state, labels=c("?","fed","loc","pri","sel","selnot","state","with"))
training_data$workclass = factor(training_data$workclass, labels=c("?","fed","loc","pri","sel","selnot","state","with"))
id = training_data$id[training_data$workclass == 'with']
table(training_data$workclass, useNA="always")
training_data = training_data[!(training_data$workclass == 'with'),]
training_data$workclass <- factor(training_data$workclass)
table(training_data$workclass, useNA="always")
test_data$workclass = factor(test_data$workclass, labels=c("?","fed","loc","pri","sel","selnot","state"))
table(test_data$workclass, useNA="always")
table(training_data$workclass, useNA="always")
rf_model<-train(income~age+gender+origin+as.ordered(edu)+as.factor(workclass)+rating+gain+loss+hours_weekly,data=training_data,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
print(rf_model)
print(rf_model$finalModel)
prediction_classes = predict.train(object=rf_model, newdata=test_data, na.action=na.pass)
predictions = data.frame(id=test_data$id, prediction=prediction_classes)
predictions
write.csv(predictions, file="predictions_atum_3.csv", row.names=FALSE)
table(test_data$occupation, useNA="always")
table(training_data$occupation, useNA="always")
rf_model<-train(income~age+gender+origin+as.factor(workclass)+rating+gain+loss+hours_weekly,data=training_data,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
print(rf_model)
print(rf_model$finalModel)
table(test_data$origin, useNA="always")
table(training_data$origin, useNA="always")
training_data$gender = factor(training_data$gender, labels=c("w","m"))
test_data$gender = factor(test_data$gender, labels=c("w","m"))
training_data$origin = factor(training_data$origin, labels=c("native american","asian","black","other","white"))
test_data$origin = factor(test_data$origin, labels=c("native american","asian","black","other","white"))
rf_model<-train(income~age+as.factor(gender)+as.factor(origin)+as.factor(workclass)+rating+gain+loss+hours_weekly,data=training_data,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
print(rf_model)
print(rf_model$finalModel)
rf_model<-train(income~age+as.factor(gender)+as.factor(origin)+as.factor(workclass)+rating+gain+loss+hours_weekly,data=training_data,method="qrf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
table(test_data$education, useNA="always")
table(training_data$education, useNA="always")
table(test_data$relationship, useNA="always")
table(training_data$relationship, useNA="always")
table(test_data$origin, useNA="always")
table(training_data$origin, useNA="always")
training_data$income[training_data$origin == "asian"]
training_data$income[training_data$origin == "white"]
training_data$income[training_data$origin == "black"]
training_data$race = if(training_data$origin == "white") "white" else "other"
training_data$race = if((training_data$origin == "white")) "white" else "other"
training_data$origin[!(training_data$origin=="white")]
training_data$income[(training_data$origin=="native american")]
training_data$income[(training_data$origin=="other")]
training_data$income[(training_data$origin=="white")]
table(training_data$income[(training_data$origin=="white")])
table(training_data$income[(training_data$origin=="asian")])
table(training_data$income[(training_data$origin=="black")])
table(training_data$income[(training_data$origin=="other")])
table(training_data$income[(training_data$origin=="native american")])
table(training_data$income[(training_data$gender=="w")])
table(training_data$income[(training_data$gender=="m")])
training_data$origin[(training_data$origin=="native america")] = "other"
training_data$origin[(training_data$origin=="black")] = "other"
table(training_data$origin)
training_data$origin[(training_data$origin=="native american")] = "other"
table(training_data$origin)
table(test_data$origin, useNA="always")
training_data$origin = factor(training_data$origin)
table(training_data$origin)
table(training_data$income(training_data$workclass=="fed"))
table(test_data$workclass, useNA="always")
table(training_data$workclass, useNA="always")
training_data$workclass = factor(training_data$workclass, labels=c("?","fed","loc","pri","sel","selnot","state","with"))
test_data$workclass = factor(test_data$workclass, labels=c("?","fed","loc","pri","sel","selnot","state"))
id = training_data$id[training_data$workclass == 'with']
training_data = training_data[!(training_data$workclass == 'with'),]
training_data$workclass <- factor(training_data$workclass)
table(training_data$income(training_data$workclass=="fed"))
table(training_data$income[training_data$workclass=="fed"])
table(training_data$income[training_data$workclass=="loc"])
table(training_data$income[training_data$workclass=="pri"])
table(training_data$income[training_data$workclass=="sel"])
table(training_data$income[training_data$workclass=="selnot"])
table(training_data$income[training_data$workclass=="state"])
t.test
t.test(training_data$income=="high", training_data$workclass)
t.test(training_data$income=="high", training_data$workclass=="state")
table(training_data$workclass)
table(test_data$relationship, useNA="always")
table(training_data$relationship, useNA="always")
table(test_data$education, useNA="always")
table(training_data$education, useNA="always")
table(training_data$income[training_data$education=="Masters"])
table(training_data$education, useNA="always")
table(test_data$education, useNA="always")
table(training_data$education, useNA="always")
educationVec = c("pre-school","pre-school","pre-school","pre-school","pre-school","pre-school","pre-school",
training_data$education = factor(training_data$education, labels=educationVec)
educationVec <- c("pre-school","pre-school","pre-school","pre-school","pre-school","pre-school","pre-school",
"assoc","assoc","uni","uni","grad","uni","uni","uni","uni")
training_data$education <- factor(training_data$education, labels=educationVec)
training_data$education = factor(training_data$education, labels=educationVec)
training_data$education = factor(training_data$education, labels=c("pre-school","pre-school","pre-school","pre-school","pre-school","pre-school","pre-school",
"assoc","assoc","uni","uni","grad","uni","uni","uni","uni"))
training_data$education = factor(training_data$education, labels=educationVec)
table(test_data$education, useNA="always")
educationVec <- c("10","11","12","1-4","5-6","7-8","9",
training_data$education = factor(training_data$education, labels=educationVec)
test_data$education = factor(test_data$education, labels=educationVec)
educationVec <- c("10","11","12","1-4","5-6","7-8","9","assoc-acdm","assoc-voc","ba","dr","grad","ma","pre","prof","col")
training_data$education = factor(training_data$education, labels=educationVec)
table(test_data$education, useNA="always")
table(test_data$education, useNA="always")
educationVec <- c("pre-school","pre-school","pre-school","pre-school","pre-school","pre-school","pre-school",
training_data$education = factor(training_data$education, labels=educationVec)
training_data = read.csv("training.csv", sep=",")
educationVec <- c("pre-school","pre-school","pre-school","pre-school","pre-school","pre-school","pre-school",
training_data$education = factor(training_data$education, labels=educationVec)
table(training_data$education, useNA="always")
training_data$education = factor(training_data$education, labels=educationVec)
table(training_data$education, useNA="always")
table(test_data$education, useNA="always")
table(training_data$education, useNA="always")
table(test_data$education, useNA="always")
table(training_data$education, useNA="always")
training_data = read.csv("training.csv", sep=",")
educationVec <- c("pre-school","pre-school","pre-school","pre-school","pre-school","pre-school","pre-school",
"assoc","assoc","uni","uni","grad","uni","uni","uni","uni")
training_data$education = factor(training_data$education, labels=educationVec)
table(training_data$education, useNA="always")
table(training_data$income[training_data$education=="assoc"])
table(training_data$income[training_data$education=="pre-school"])
table(training_data$income[training_data$education=="uni"])
table(training_data$income[training_data$education=="grad"])
test_data$education = factor(test_data$education, labels=educationVec)
table(test_data$education, useNA="always")
table(training_data$education, useNA="always")
table(test_data$education)
table(test_data$education)
table(test_data$education, useNA="always")
table(training_data$education, useNA="always")
factor(test_data$education)
factor(unique(test_data$education))
factor(test_data$education)
training_data = read.csv("training.csv", sep=",")
test_data = read.csv("test.csv", sep=",")
test_data
training_data$edu = ordered(training_data$edu)
test_data$edu = ordered(test_data$edu)
training_data$gender = factor(training_data$gender, labels=c("w","m"))
test_data$gender = factor(test_data$gender, labels=c("w","m"))
training_data$origin = factor(training_data$origin, labels=c("native american","asian","black","other","white"))
test_data$origin = factor(test_data$origin, labels=c("native american","asian","black","other","white"))
training_data$origin[(training_data$origin=="native american")] = "other"
training_data$origin[(training_data$origin=="black")] = "other"
training_data$origin = factor(training_data$origin)
table(training_data$origin)
table(test_data$education, useNA="always")
table(training_data$education, useNA="always")
educationVec <- c("pre-school","pre-school","pre-school","pre-school","pre-school","pre-school","pre-school",
training_data$education = factor(training_data$education, labels=educationVec)
test_data$education = factor(test_data$education, labels=educationVec)
rf_model<-train(income~age+as.factor(gender)+as.factor(origin)+as.factor(education)+rating+gain+loss+hours_weekly,data=training_data,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
print(rf_model)
print(rf_model$finalModel)
prediction_classes = predict.train(object=rf_model, newdata=test_data, na.action=na.pass)
test_data$origin[(training_data$origin=="native american")] = "other"
test_data$origin[(training_data$origin=="black")] = "other"
prediction_classes = predict.train(object=rf_model, newdata=test_data, na.action=na.pass)
table(training_data$origin)
test_data$origin = factor(test_data$origin)
prediction_classes = predict.train(object=rf_model, newdata=test_data, na.action=na.pass)
table(test_data$origin)
test_data$origin = factor(test_data$origin, labels=c("native american","asian","black","other","white"))
test_data$origin[(test_data$origin=="native american")] = "other"
test_data$origin[(test_data$origin=="black")] = "other"
test_data$origin = factor(test_data$origin)
table(test_data$origin)
prediction_classes = predict.train(object=rf_model, newdata=test_data, na.action=na.pass)
predictions = data.frame(id=test_data$id, prediction=prediction_classes)
predictions
write.csv(predictions, file="predictions_atum_4.csv", row.names=FALSE)
tc <- trainControl("repeatedcv", number=10, repeats=10, classProbs=TRUE, savePred=T)
InTrain<-createDataPartition(y=training_data$income,p=0.3,list=FALSE)
training1<-training_data[InTrain,]
rf_model<-train(income~age+as.factor(gender)+as.factor(origin)+as.factor(education)+as.ordered(edu)+rating+gain+loss+hours_weekly,data=training1,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
print(rf_model)
print(rf_model$finalModel)
tc <- trainControl("repeatedcv", number=40, repeats=40, classProbs=TRUE, savePred=T)
rf_model<-train(income~age+as.factor(gender)+as.factor(origin)+as.factor(education)+as.ordered(edu)+rating+gain+loss+hours_weekly,data=training_data,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
print(rf_model)
print(rf_model$finalModel)
rf_model<-train(income~age+gender+rating+gain+loss+hours_weekly,data=training_data,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
print(rf_model)
print(rf_model$finalModel)
set.seed(42) # do NOT CHANGE this seed
install.packages("caret")
install.packages("caret")
library(caret)
install.packages("e1071")
install.packages("caret")
install.packages("caret")
library(caret)
install.packages("e1071")
library(e1071)
set.seed(42) # do NOT CHANGE this seed
training_data = read.csv("training2.csv", sep=",")
test_data = read.csv("test2.csv", sep=",")
test_data
names(training_data)
tc <- trainControl("repeatedcv", number=10, repeats=10, classProbs=TRUE, savePred=T)
InTrain<-createDataPartition(y=training_data$income,p=0.3,list=FALSE)
training1<-training_data[InTrain,]
names(training_data)
rf_model<-train(reorder~salutation+value+voucher+gift+points,data=training_data,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
print(rf_model)
print(rf_model$finalModel)
print(rf_model$finalModel)
print(rf_model)
print(rf_model$finalModel)
prediction_classes = predict.train(object=rf_model, newdata=test_data, na.action=na.pass)
test_data
names(test_data)
names(training_data)
names(test_data)
test_data
test_data = read.csv("test3.csv", sep=",")
test_data
names(test_data)
names(training_data)
names(test_data)
prediction_classes = predict.train(object=rf_model, newdata=test_data, na.action=na.pass)
predictions = data.frame(id=test_data$id, prediction=prediction_classes)
predictions
print(rf_model)
print(rf_model$finalModel)
rf_model<-train(reorder~salutation+value+voucher+gift+points,data=training_data,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
set.seed(42) # do NOT CHANGE this seed
print(rf_model)
print(rf_model$finalModel)
prediction_classes = predict.train(object=rf_model, newdata=test_data, na.action=na.pass)
predictions = data.frame(id=test_data$id, prediction=prediction_classes)
predictions
write.csv(predictions, file="predictions_atum_2.csv", row.names=FALSE)
write.csv(predictions, file="predictionsdmc2_atum_1.csv", row.names=FALSE)
install.packages("caret")
library(caret)
install.packages("e1071")
library(e1071)
install.packages("caret")
set.seed(42) # do NOT CHANGE this seed
######################################################
# 1. Build a Team in the DMC Manager
# https://dmc.dss.in.tum.de/dmc/
# Login with TUM login data ("TUM-Kennung")
#
# Found or join a team (size: 1-4 students)
######################################################
# 2. Load & Explore the Training Data Set
training_data = read.csv("training.csv", sep=",")
# Explore the data set...
######################################################
# 3. Data Preparation
test_data = read.csv("test.csv", sep=",")
tc <- trainControl("repeatedcv", number=10, repeats=10, classProbs=TRUE, savePred=T)
InTrain<-createDataPartition(y=training_data$income,p=0.3,list=FALSE)
training1<-training_data[InTrain,]
rf_model<-train(income~age+gender+origin+edu+rating+gain+loss+hours_weekly,data=training_data,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
install.packages("caret")
print(rf_model)
print(rf_model$finalModel)
prediction_classes = predict.train(object=rf_model, newdata=test_data, na.action=na.omit)
predictions = data.frame(id=test_data$id, prediction=prediction_classes)
predictions
