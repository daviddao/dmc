library(caret)
install.packages('party')
library(party)
set.seed(42) # do NOT CHANGE this seed
training_data = read.csv("training.csv", sep=",")
test_data = read.csv("test.csv", sep=",")
model <- cforest(as.factor(income) ~ id + age + workclass + rating + education + edu + family_status + occupation + origin + gender,
data = training_data, controls=cforest_unbiased(ntree=2, mtry=3))
prediction_classes = predict.train(object=model, newdata=test_data, na.action=na.pass)
predictions <- predict(model, test_data, OOB=TRUE, type="response")
predictions <- predict(model, test_data, OOB=TRUE, type="response")
model <- cforest(as.factor(income) ~ id + age + workclass + rating + education + edu + family_status + occupation + origin + gender,
data = training_data, controls=cforest_unbiased(ntree=2, mtry=3))
predictions <- predict(model, test_data, OOB=TRUE, type="response")
model <- cforest(as.factor(income) ~ id + age + workclass + rating + education + edu + family_status + occupation + origin + gender,
data = training_data, controls=cforest_unbiased(ntree=10, mtry=3))
predictions <- predict(model, test_data, OOB=TRUE, type="response")
table(data$state)
data = read.csv("raw_data.csv")
model <- cforest(as.factor(income) ~ id + age + workclass + rating + education + edu + family_status + occupation + origin + gender,
data = training_data, controls=cforest_unbiased(ntree=10, mtry=3))
predictions <- predict(model, training_data, OOB=TRUE, type="response")
predictions
library(caret)
install.packages('party')
install.packages("party")
install.packages("party")
install.packages("party")
install.packages("party")
library(party)
training_data = read.csv("training.csv", sep=",")
training_data[1:3000]
training_data[c(1,100)]
c(1:109)
training_data[c(1:2500)]
c(1:2500)
training_data[c(1:2500),]
training = training_data[c(1:2500),]
test = training_data[c(2501:4000),]
model <- cforest(as.factor(income) ~ id + age + workclass + rating + education + edu + family_status + occupation + origin + gender,
data = training, controls=cforest_unbiased(ntree=10, mtry=3))
predictions <- predict(model, test, OOB=TRUE, type="response")
predictions
test[1]
test["income"]
model <- cforest(as.factor(income) ~ id + age + workclass + rating + education + edu + family_status + occupation + origin + gender,
data = training, controls=cforest_unbiased(ntree=2000, mtry=3))
predictions <- predict(model, test, OOB=TRUE, type="response")
predictions
model <- cforest(as.factor(income) ~ age + workclass,
data = training, controls=cforest_unbiased(ntree=2000, mtry=3))
warnings()
model <- cforest(as.factor(income) ~ age + rating + edu + family_status + gender,
data = training, controls=cforest_unbiased(ntree=2000, mtry=3))
predictions <- predict(model, test, OOB=TRUE, type="response")
predictions
test
drops <- c("income")
test[,!(names(test) %in% drops)]
model <- cforest(as.factor(income) ~ age + rating + edu + family_status + gender,
data = training, controls=cforest_unbiased(ntree=2000, mtry=3))
predictions
model <- cforest(as.factor(income) ~ gender,
data = training, controls=cforest_unbiased(ntree=10, mtry=1))
predictions <- predict(model, test, OOB=TRUE, type="response")
predictions
prediction_classes = predict.train(object=model, newdata=test_data, na.action=na.pass)
library(caret)
install.packages('party')
install.packages("party")
tc <- trainControl("repeatedcv", number=10, repeats=10, classProbs=TRUE, savePred=T)
library(caret)
install.packages('party')
library(caret)
library(party)
install.packages('party')
install.packages("caret")
library(caret)
training_data = read.csv("training.csv", sep=",")
tc <- trainControl("repeatedcv", number=10, repeats=10, classProbs=TRUE, savePred=T)
InTrain<-createDataPartition(y=training_data$income,p=0.3,list=FALSE)
View(InTrain)
training1<-training_data[InTrain,]
rf_model<-train(classe~.,data=training1,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
rf_model<-train(income~.,data=training1,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
print(rf_model)
rf_model<-train(income~.,data=training1,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
install.packages("e1071")
rf_model<-train(income~.,data=training1,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
rf_model<-train(income~.,data=training1,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
print(rf_model)
prediction_classes = predict.train(object=rfmodel, newdata=test_data, na.action=na.pass)
prediction_classes = predict.train(object=rf_model, newdata=test_data, na.action=na.pass)
print(rf_model$finalModel)
rf_model<-train(income~.,data=training,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
rf_model<-train(income~.,data=training_data,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
print(rf_model)
print(rf_model$finalModel)
prediction_classes = predict.train(object=rf_model, newdata=test_data, na.action=na.pass)
rf_model<-train(income~age,data=training1,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
rf_model<-train(income~age+gender+origin+family_status+edu+rating+gain+loss+hours_weekly,data=training1,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
print(rf_model)
print(rf_model$finalModel)
prediction_classes = predict.train(object=rf_model, newdata=test_data, na.action=na.pass)
test_data
prediction_classes = predict.train(object=rf_model, newdata=test_data, na.action=na.omit)
predictions = data.frame(id=test_data$id, prediction=prediction_classes)
predictions
prediction_classes = predict.train(object=rf_model, newdata=test_data, na.action=na.omit)
predictions = data.frame(id=test_data$id, prediction=prediction_classes)
predictions
write.csv(predictions, file="predictions_group_name_number.csv", row.names=FALSE)
View(test_data)
rf_model<-train(income~age+gender+origin+edu+rating+gain+loss+hours_weekly,data=training1,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
print(rf_model)
print(rf_model$finalModel)
prediction_classes = predict.train(object=rf_model, newdata=test_data, na.action=na.omit)
predictions = data.frame(id=test_data$id, prediction=prediction_classes)
predictions
print(rf_model$finalModel)
rf_model<-train(income~age+gender+origin+edu+rating+gain+loss+hours_weekly,data=training_data,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
print(rf_model)
print(rf_model$finalModel)
prediction_classes = predict.train(object=rf_model, newdata=test_data, na.action=na.omit)
predictions = data.frame(id=test_data$id, prediction=prediction_classes)
predictions
write.csv(predictions, file="predictions_group_name_number.csv", row.names=FALSE)
prediction_classes = predict.train(object=rf_model, newdata=test_data, na.action=na.pass)
predictions = data.frame(id=test_data$id, prediction=prediction_classes)
predictions
write.csv(predictions, file="predictions_group_name_number.csv", row.names=FALSE)
write.csv(predictions, file="predictions_atum_1.csv", row.names=FALSE)
tc <- trainControl("repeatedcv", number=10, repeats=100, classProbs=TRUE, savePred=T)
InTrain<-createDataPartition(y=training_data$income,p=0.3,list=FALSE)
training1<-training_data[InTrain,]
rf_model<-train(income~age+gender+origin+edu+rating+gain+loss+hours_weekly,data=training_data,method="rf",
trControl=trainControl(method="cv",number=10),
prox=TRUE,allowParallel=TRUE)
print(rf_model)
print(rf_model$finalModel)
rf_model<-train(income~age+gender+family_status+origin+edu+rating+gain+loss+hours_weekly,data=training_data,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
